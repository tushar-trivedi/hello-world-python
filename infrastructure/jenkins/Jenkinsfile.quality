pipeline {
    agent any
    triggers {
        // This pipeline is triggered via webhook for PRs
        githubPullRequest events: [
            'OPEN',
            'SYNCHRONIZE'
        ]
    }
    
    environment {
        // Add the SonarQube token as environment variable
        SONAR_TOKEN = credentials('sonarqube-token')
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh """
                    sonar-scanner \
                      -Dsonar.projectKey=${env.JOB_NAME.replaceAll('/', '_')} \
                      -Dsonar.projectName=${env.JOB_NAME.replaceAll('/', '_')} \
                      -Dsonar.projectVersion=${env.BUILD_NUMBER} \
                      -Dsonar.sources=. \
                      -Dsonar.host.url=http://sonarqube.sonarqube.svc.cluster.local:9000 \
                      -Dsonar.login=${SONAR_TOKEN} \
                      -Dsonar.exclusions=infrastructure/**,yaml/**,**/*.md \
                      -Dsonar.java.binaries=. \
                      -Dsonar.python.coverage.reportPaths=coverage.xml
                    """
                }
            }
        }
        
        stage('Quality Gate') {
            steps {
                timeout(time: 2, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
    }
    
    post {
    success {
        githubNotify(
            context: 'SonarQube Quality Check',
            description: 'Quality checks passed',
            status: 'SUCCESS'
        )
    }
    failure {
        githubNotify(
            context: 'SonarQube Quality Check',
            description: 'Quality checks failed',
            status: 'FAILURE'
        )
    }
}

}